/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sdp.prac2;

import static org.junit.jupiter.api.Assertions.assertIterableEquals;
import static org.junit.jupiter.api.Assertions.*;


import java.util.*;

import org.junit.jupiter.api.Test;

class AppTest {
    @Test 
    public void testofTask2(){

    //1. Arrange = creating a list
    //Normal list
    List<String> test1 = List.of("Chichi", "Cathy", "Sine", "Kay", "Kyle");
    //List with only one element
    List<String> test2 = List.of("C");
    //List thats empty
    List<String> test3 = List.of();

    //2. Act 
    List<String> testresult = SimpleFunctions.Task2(test1);
    List<String> testresult2 = SimpleFunctions.Task2(test2);
    List<String> testresult3 = SimpleFunctions.Task2(test3);

    //3. Assert
    List<String> expectedans1 = List.of("hichi","athy", "ine", "ay", "yle");
    List<String> expectedans2 = List.of();
    List<String> expectedans3 = List.of();
    
    assertEquals(expectedans1, testresult, "The first element should not be here");
    assertEquals(expectedans2, testresult2, "The first element should not be here, it should be empty");
    assertEquals(expectedans3, testresult3, "It should remain empty");



    }
    @Test void TestingTask6 () {
        // Arrange
        SimpleFunctions testcases = new SimpleFunctions();
        
        List<Integer> data = Arrays.asList(100, 200, 300);
        List<Integer> data1 = Arrays.asList(120, 250, 305);
        List<Integer> data2 = Arrays.asList(990, 1000, 1010);

        List<Integer> expected = Arrays.asList(100, 200, 300);
        List<Integer> expected1 = Arrays.asList(200, 300, 400);
        List<Integer> expected2 = Arrays.asList(1000, 1000, 1100);
        // Act
        List<Integer> result = testcases.Task6(data);
        List<Integer> result1 = testcases.Task6(data1);
        List<Integer> result2 = testcases.Task6(data2);
        // Assert
        assertIterableEquals(expected, result);
        assertIterableEquals(expected1, result1);
        assertIterableEquals(expected2, result2);
    }
}
